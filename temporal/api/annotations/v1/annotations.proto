// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// (-- api-linter: core::0191::java-multiple-files=disabled --)
// (-- api-linter: core::0191::java-package=disabled --)
// (-- api-linter: core::0191::java-outer-classname=disabled --)

syntax = "proto3";

package temporal.api.annotations.v1;

option go_package = "go.temporal.io/api/annotations/v1;annotations";

import "google/protobuf/descriptor.proto";

// Temporal-specific method annotations.
message Method {
    // Describes the scope of a method (whole cluster or inividual namespace).
    Scope scope = 1;
    // Describes what level of access is needed for a method. Note that this field is
    // completely advisory! Any authorizer implementation may implement whatever logic it
    // chooses, including ignoring this field. It is used by the "default" authorizer to check
    // against claims.
    Access access = 2;
}

// Describes whether a method is scoped to a namespace or affects the whole cluster.
//
// These are used to record the intention of the method and ensure that the addition of a
// "namespace" field later doesn't change the authorization behavior.
enum Scope {
    SCOPE_UNSPECIFIED = 0;
    // Method affects a single namespace. The request must contain a string field "namespace".
    SCOPE_NAMESPACE = 1;
    // Method affects the whole cluster. The request must _not_ contain a string field "namespace".
    SCOPE_CLUSTER = 2;
}

// Describes whether a method is allowed to readers, writers, or admins.
// (Higher levels include lower levels.)
// These correspond to the Go constants
// go.temporal.io/server/common/authorization.Role{Reader,Writer,Admin}
enum Access {
    ACCESS_UNSPECIFIED = 0;
    ACCESS_READER = 1;
    ACCESS_WRITER = 2;
    ACCESS_ADMIN = 3;
}

extend google.protobuf.MethodOptions {
  Method method = 57233;
}
